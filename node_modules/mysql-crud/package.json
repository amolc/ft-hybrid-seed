{
  "name": "mysql-crud",
  "version": "0.1.4",
  "description": "A mysql CRUD file to use with mysql package",
  "main": "crud.js",
  "scripts": {
    "test": "mocha test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ryan-sandy/mysql-crud.git"
  },
  "dependencies": {
    "mysql": "x"
  },
  "devDependencies": {
    "mocha": "x"
  },
  "keywords": [
    "mysql",
    "mysql-crud",
    "crud",
    "mysql crud"
  ],
  "author": {
    "name": "Ryan Lee",
    "email": "thesandyman123@gmail.com"
  },
  "contributors": [
    {
      "name": "Stephen Wan",
      "email": "stephen@stephenwan.net",
      "url": "http://www.stephenwan.net/"
    }
  ],
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "ï»¿mysql-crud\n==========\n\nSimple CRUD operations for felixge/node-mysql.\n\nMysql-crud dynamically creates an object that allows you to perform CRUD operations on the specified connection pool and table. Mysql-Crud is NOT an ORM. You cannot use it across multiple tables or for more complicated queries. It is meant to a be a short hand for simple INESRT, SELECT, UPDATE, and DELETE queries on a single table.\n\nTable of Contents:\n\n* [Initialization](https://github.com/ryan-sandy/mysql-crud#initialization)\n* [Create](https://github.com/ryan-sandy/mysql-crud#create)\n* [Load (Retrieve)](https://github.com/ryan-sandy/mysql-crud#load-retreive)\n* [Update](https://github.com/ryan-sandy/mysql-crud#update)\n* [Destroy](https://github.com/ryan-sandy/mysql-crud#destroy)\n* [Advanced](https://github.com/ryan-sandy/mysql-crud#advanced-usage)\n\n##Initialization:\nIn-order to create a crud-object you must called the mysql-crud function with two parameters: a mysql connection pool and the table name.\n\n```javascript\nvar mysql = require('mysql');                \nvar db = mysql.createPool();\nvar CRUD = require('mysql-crud');\nvar user-crud = CRUD(db, 'users');\n//user-crud will now have the four functions\n```\n\n##Create\n\n`create(attributes, callback)`\n\nThis function will perform the INSERT INTO query. It will escape the `attributes` object into `SET <key> : <value>`. Once the insert is complete it will call the callback with the node-mysql callback (err, and rows). \n\n```javascript\nuser-crud.create({'id' : 1, 'username' : 'test', 'password' : '1234'}, function (err, vals) {\n\t//mysql callback\n});\n```\n\n##Load (Retreive)\n\n`load(selector, callback, [options])`\n\nThis function will SELECT all the rows that are equal to selector key-value. The keys are the columns and the values are the values to select against. If the selector contains multiple keys-value pairs, these will be escaped into multiple equal statements joined together with `AND`. An empty selector object ({}) will be escaped to `WHERE 1`;\n\nThe `options` parameter is an object that may contain two properties, `limit` and `offset`. These will be escaped into their respective MySQL `LIMIT` and `OFFEST` clauses. Note, an offset without a limit will be ignored.\n\nExample:\n```javascript\nuser-crud.load({'first-name' : 'mysql', 'last-name' : 'crud'}, callback);\n//SELECT * FROM 'users' WHERE 'first-name' = \"mysql\" AND 'last-name' = \"CRUD\"\n//optionally\nuser-crud.load({}, callback, {'limit' : 25, 'offset' : 10});\n//SELECT * FROM `users` WHERE 1 LIMIT 25 OFFSET 10\n\n//offset with out limit is ignored\nuser-crud.load({}, callback, {'offset' : 10});\n//SELECT * FROM `users` WHERE 1\n```\n\n\n##Update:\n\n`update(selector, values, callback)`\n\nThis function will run the UPDATE query. It will update all rows where the selector is true to the values in the values object.\n\n##Destroy\n\n`destroy(selector, callback)`\n\nThis function will run the DELTE FROM query based on the selectors. Use with caution.\n\n\n##Advanced Usage\n\nIf you are using the MVC model you can create custom functions or default values for your crud command:\n\n```javascript\n/*model/user.js*/\nvar db = require('your-database-pool.js');\nvar crud = require('crud')(db, 'users');\n\nexports.create = function (attrs, callback) {\n\tif (attrs.password !== undefined) {\n\t\tattrs.password = hash(attrs.password);\n\t}\n\tcrud(attrs, callback);\n};\nexports.load = crud.load;\nexports.update = crud.update;\nexports.destroy = crud.destroy;\n```\n\n##AndEscape\n\n`crud.andEscape(queryString, obj)`\n\nReplaces `??` in queryString with `key = values AND key2 = values2` from the `obj` parameter. Escapes obj using node-mysql escape method.\n\n\nLicense\n====\nThe MIT License (MIT)\n\nCopyright (c) 2013 Ryan Lee\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nContributors\n====\n\n* Ryan Lee\n* Stephen Wan\n",
  "bugs": {
    "url": "https://github.com/ryan-sandy/mysql-crud/issues"
  },
  "homepage": "https://github.com/ryan-sandy/mysql-crud",
  "_id": "mysql-crud@0.1.4",
  "dist": {
    "shasum": "63099b87b9647b9e07a3ac9e359070fe2a6f9724"
  },
  "_from": "mysql-crud@~0.1.4",
  "_resolved": "https://registry.npmjs.org/mysql-crud/-/mysql-crud-0.1.4.tgz"
}
